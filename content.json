{"meta":{"title":"聂文强的个人博客","subtitle":null,"description":"在最好的时光，做想做的梦，去想去的地方","author":"聂文强","url":""},"pages":[{"title":"bangumi","date":"2019-02-10T13:32:48.000Z","updated":"2019-08-14T01:46:12.226Z","comments":false,"path":"bangumi/index.html","permalink":"/bangumi/index.html","excerpt":"","text":"","keywords":null},{"title":"client","date":"2018-12-20T15:13:35.000Z","updated":"2019-08-14T01:51:25.186Z","comments":false,"path":"client/index.html","permalink":"/client/index.html","excerpt":"","text":"直接下载 or 扫码下载：","keywords":"Android客户端"},{"title":"about","date":"2018-12-12T14:14:36.000Z","updated":"2019-08-14T01:51:44.302Z","comments":false,"path":"about/index.html","permalink":"/about/index.html","excerpt":"","text":"[残翼の黑猫] 与&nbsp; BrokenWings&nbsp; （ 轮入道 ） 对话中... function bot_ui_ini() { var botui = new BotUI(\"hello-mashiro\"); botui.message.add({ delay: 800, content: \"Hi, there👋\" }).then(function () { botui.message.add({ delay: 1100, content: \"这里是 BrokenWings\" }).then(function () { botui.message.add({ delay: 1100, content: \"一个可爱的蓝孩子~\" }).then(function () { botui.action.button({ delay: 1600, action: [{ text: \"然后呢？ 😃\", value: \"sure\" }, { text: \"少废话！ 🙄\", value: \"skip\" }] }).then(function (a) { \"sure\" == a.value && sure(); \"skip\" == a.value && end() }) }) }) }); var sure = function () { botui.message.add({ delay: 600, content: \"😘\" }).then(function () { secondpart() }) }, end = function () { botui.message.add({ delay: 600, content: \"![...](https://view.moezx.cc/images/2018/05/06/a1c4cd0452528b572af37952489372b6.md.jpg)\" }) }, secondpart = function () { botui.message.add({ delay: 1500, content: \"目前是一个java攻城狮\" }).then(function () { botui.message.add({ delay: 1500, content: \"向往技术，但时间窘迫\" }).then(function () { botui.message.add({ delay: 1200, content: \"快奔三的人了，还是一个码农\" }).then(function () { botui.message.add({ delay: 1500, content: \"主攻 JAVA和数据，略懂Hadoop，偶尔也折腾 HTML/CSS/JavaScript\" }).then(function () { botui.message.add({ delay: 1500, content: \"博客也是新搭建的，希望各位朋友多多指教\" }).then(function () { botui.message.add({ delay: 1800, content: \"喜欢动漫游戏，也热爱旅游\" }).then(function () { botui.action.button({ delay: 1100, action: [{ text: \"为什么叫BrokenWings呢？ 🤔\", value: \"why-BrokenWings\" }] }).then(function (a) { thirdpart() }) }) }) }) }) }) }) }, thirdpart = function () { botui.message.add({ delay: 1E3, content: \"BrokenWings来源一部动漫-圣魔之血的片尾曲，有兴趣的朋友可以去看看~\" }).then(function () { botui.action.button({ delay: 1500, action: [{ text: \"你喜欢猫吗？ 🤔\", value: \"why-cat\" }] }).then(function (a) { fourthpart() }) }) }, fourthpart = function () { botui.message.add({ delay: 1E3, content: \"当然喜欢，家里养过几只猫了… \" }).then(function () { botui.message.add({ delay: 1100, content: \"并且都是黑色的，像地狱少女里的轮入道和死神里面的夜一猫形态一样！\" }).then(function () { botui.action.button({ delay: 1500, action: [{ text: \"这博客是你自己独立制作的吗？(ง •_•)ง\", value: \"why-domain\" }] }).then(function (a) { fifthpart() }) }) }) }, fifthpart = function () { botui.message.add({ delay: 1E3, content: \"emmmm，本人是学java后端的，对前端技术掌握有限呢，特别感谢hojun，我是看他的blog教学才能搭建出来的\" }).then(function () { botui.message.add({ delay: 1600, content: \"有什么做得不好的地方还请多多指教 ^_^\" }) }) } } bot_ui_ini()","keywords":"关于"},{"title":"comment","date":"2018-12-20T15:13:48.000Z","updated":"2019-08-14T01:51:05.061Z","comments":true,"path":"comment/index.html","permalink":"/comment/index.html","excerpt":"","text":"念两句诗 叙别梦、扬州一觉。 【宋代】吴文英《夜游宫·人去西楼雁杳》","keywords":"留言板"},{"title":"lab","date":"2019-01-05T13:47:59.000Z","updated":"2019-08-14T01:52:06.936Z","comments":false,"path":"lab/index.html","permalink":"/lab/index.html","excerpt":"","text":"sakura主题balabala","keywords":"Lab实验室"},{"title":"donate","date":"2018-12-20T15:13:05.000Z","updated":"2019-08-14T01:51:58.576Z","comments":false,"path":"donate/index.html","permalink":"/donate/index.html","excerpt":"","text":"","keywords":"谢谢饲主了喵~"},{"title":"links","date":"2018-12-19T15:11:06.000Z","updated":"2019-08-14T01:52:15.757Z","comments":true,"path":"links/index.html","permalink":"/links/index.html","excerpt":"","text":"","keywords":"友人帐"},{"title":"music","date":"2018-12-20T15:14:28.000Z","updated":"2019-08-14T01:52:25.295Z","comments":false,"path":"music/index.html","permalink":"/music/index.html","excerpt":"","text":"","keywords":"喜欢的音乐"},{"title":"rss","date":"2018-12-20T15:09:03.000Z","updated":"2019-05-15T23:39:12.000Z","comments":true,"path":"rss/index.html","permalink":"/rss/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-12-12T14:14:16.000Z","updated":"2019-05-15T23:39:12.000Z","comments":true,"path":"tags/index.html","permalink":"/tags/index.html","excerpt":"","text":""},{"title":"theme-sakura","date":"2019-01-04T14:53:25.000Z","updated":"2019-05-15T23:39:12.000Z","comments":false,"path":"theme-sakura/index.html","permalink":"/theme-sakura/index.html","excerpt":"","text":"Hexo主题Sakura修改自WordPress主题Sakura，感谢原作者Mashiro","keywords":"Hexo 主题 Sakura 🌸"},{"title":"video","date":"2018-12-20T15:14:38.000Z","updated":"2019-05-15T23:39:12.000Z","comments":false,"path":"video/index.html","permalink":"/video/index.html","excerpt":"","text":"var videos = [ { img: 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '放送时间: 2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' }, { img : 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' } ] .should-ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:95%;}.should-ellipsis-full{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:100%;}.should-ellipsis i{position:absolute;right:24px;}.grey-text{color:#9e9e9e !important}.grey-text.text-darken-4{color:#212121 !important}html{line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}img{border-style:none}progress{display:inline-block;vertical-align:baseline}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}html{-webkit-box-sizing:border-box;box-sizing:border-box}*,*:before,*:after{-webkit-box-sizing:inherit;box-sizing:inherit}ul:not(.browser-default){padding-left:0;list-style-type:none}ul:not(.browser-default)>li{list-style-type:none}.card{-webkit-box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2);box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2)}.hoverable{-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s}.hoverable:hover{-webkit-box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19)}i{line-height:inherit}i.right{float:right;margin-left:15px}.bangumi .right{float:right !important}.material-icons{text-rendering:optimizeLegibility;-webkit-font-feature-settings:'liga';-moz-font-feature-settings:'liga';font-feature-settings:'liga'}.row{margin-left:auto;margin-right:auto;margin-bottom:20px}.row:after{content:\"\";display:table;clear:both}.row .col{float:left;-webkit-box-sizing:border-box;box-sizing:border-box;padding:0 .75rem;min-height:1px}.row .col.s12{width:100%;margin-left:auto;left:auto;right:auto}@media only screen and (min-width:601px){.row .col.m6{width:50%;margin-left:auto;left:auto;right:auto}}html{line-height:1.5;font-family:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif;font-weight:normal;color:rgba(0,0,0,0.87)}@media only screen and (min-width:0){html{font-size:14px}}@media only screen and (min-width:992px){html{font-size:14.5px}}@media only screen and (min-width:1200px){html{font-size:15px}}.card{position:relative;margin:.5rem 0 1rem 0;background-color:#fff;-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s;border-radius:2px}.card .card-title{font-size:24px;font-weight:300}.card .card-title.activator{cursor:pointer}.card .card-image{position:relative}.card .card-image img{display:block;border-radius:2px 2px 0 0;position:relative;left:0;right:0;top:0;bottom:0;width:100%}.card .card-content{padding:24px;border-radius:0 0 2px 2px}.card .card-content p{margin:0}.card .card-content .card-title{display:block;line-height:32px;margin-bottom:8px}.card .card-content .card-title i{line-height:32px}.card .card-reveal{padding:24px;position:absolute;background-color:#fff;width:100%;overflow-y:auto;left:0;top:100%;height:100%;z-index:3;display:none}.card .card-reveal .card-title{cursor:pointer;display:block}.waves-effect{position:relative;cursor:pointer;display:inline-block;overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent;vertical-align:middle;z-index:1;-webkit-transition:.3s ease-out;transition:.3s ease-out}.waves-effect img{position:relative;z-index:-1}.waves-block{display:block}::-webkit-input-placeholder{color:#d1d1d1}::-moz-placeholder{color:#d1d1d1}:-ms-input-placeholder{color:#d1d1d1}::-ms-input-placeholder{color:#d1d1d1}[type=\"radio\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"radio\"]:not(:checked)+span{position:relative;padding-left:35px;cursor:pointer;display:inline-block;height:25px;line-height:25px;font-size:1rem;-webkit-transition:.28s ease;transition:.28s ease;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border-radius:50%}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border:2px solid #5a5a5a}[type=\"radio\"]:not(:checked)+span:after{-webkit-transform:scale(0);transform:scale(0)}[type=\"checkbox\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"checkbox\"]:not(:checked):disabled+span:not(.lever):before{border:none;background-color:rgba(0,0,0,0.42)}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):before{width:0;height:0;border:3px solid transparent;left:6px;top:10px;-webkit-transform:rotateZ(37deg);transform:rotateZ(37deg);-webkit-transform-origin:100% 100%;transform-origin:100% 100%}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):after{height:20px;width:20px;background-color:transparent;border:2px solid #5a5a5a;top:0px;z-index:0}input[type=checkbox]:not(:disabled) ~ .lever:active:before,input[type=checkbox]:not(:disabled).tabbed:focus ~ .lever::before{-webkit-transform:scale(2.4);transform:scale(2.4);background-color:rgba(0,0,0,0.08)}input[type=range].focused:focus:not(.active)::-webkit-slider-thumb{-webkit-box-shadow:0 0 0 10px rgba(38,166,154,0.26);box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-moz-range-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-ms-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)} 番组计划 这里将是永远的回忆 window.onload = function(){ videos.forEach(function(video, i){ $('#rootRow').append(` ${video.title} ${video.jp} ${video.status} ${video.title} ${video.jp} 放送时间: ${video.time} ${video.desc} ${video.status} `) }) }","keywords":"B站"}],"posts":[{"title":"SpringMVC获取不到session中的值","slug":"SpringMVC获取不到session中的值","date":"2019-11-27T07:20:00.000Z","updated":"2020-01-10T08:36:13.156Z","comments":true,"path":"2019/11/27/SpringMVC获取不到session中的值/","link":"","permalink":"/2019/11/27/SpringMVC获取不到session中的值/","excerpt":"","text":"问题描述：需要在接口中获取登录人的信息（登录人的信息在登录时存入session），但是获取时获取不到session中的值。错误代码如下 /** * * &lt;p&gt;Title: login &lt;/p&gt; * &lt;p&gt;Description: TODO &lt;/p&gt; * @param map * @return */ @ApiOperation(value=&quot;用户登录&quot;, httpMethod = &quot;POST&quot;,produces = MediaType.APPLICATION_JSON_VALUE) @RequestMapping(value = RestUrlConstants.LOGIN, method = RequestMethod.POST,produces=MediaType.APPLICATION_JSON_VALUE) public ResultBuilder login(@RequestBody Map&lt;String, String&gt; map,HttpServletRequest request) { String loginAccount=map.get(&quot;username&quot;); String password = map.get(&quot;password&quot;); //String password = DigestUtils.md5Hex(); Map&lt;String, Object&gt; resultMap = userService.getUserByAccount(loginAccount, password); if (resultMap!=null) { Map&lt;String, Object&gt; userInfo=(Map&lt;String, Object&gt;)resultMap.get(&quot;userInfo&quot;); request.getSession().setAttribute(&quot;userId&quot;, userInfo.get(&quot;id&quot;)); return ResultBuilder.success().build(resultMap); }else{ return ResultBuilder.fail().build(userService.getLoginFailReason(loginAccount, password)); } } /** * * &lt;p&gt;Title: getLoginUserInfo &lt;/p&gt; * &lt;p&gt;Description: TODO &lt;/p&gt; * @param userId * @return */ @ApiOperation(value=&quot;获取登录用户信息&quot;, httpMethod = &quot;GET&quot;,produces = MediaType.APPLICATION_JSON_VALUE) @RequestMapping(value = RestUrlConstants.LOGININFO, method = RequestMethod.GET) public ResultBuilder getLoginUserInfo(@RequestParam(value=&quot;loggedId&quot;,required=false)Integer userId,HttpServletRequest request){ if (userId==null) { userId = Integer.valueOf(request.getSession().getAttribute(&quot;userId&quot;).toString()); } return ResultBuilder.success().build(userService.getUserById(userId)); } 解决方法: 创建 获取HttpServletRequest 的工具类RequestUtil.java`import org.springframework.web.context.request.RequestContextHolder;import org.springframework.web.context.request.ServletRequestAttributes; import javax.servlet.http.HttpServletRequest; public class RequestUtil { public static HttpServletRequest getRequest(){ HttpServletRequest request = ((ServletRequestAttributes)RequestContextHolder.getRequestAttributes()).getRequest(); return request; } } 2. 使用request获取session中的存值 /* * &lt;p&gt;Title: login &lt;/p&gt; * &lt;p&gt;Description: TODO &lt;/p&gt; * @param map * @return */ @ApiOperation(value=&quot;用户登录&quot;, httpMethod = &quot;POST&quot;,produces = MediaType.APPLICATION_JSON_VALUE) @RequestMapping(value = RestUrlConstants.LOGIN, method = RequestMethod.POST,produces=MediaType.APPLICATION_JSON_VALUE) public ResultBuilder login(@RequestBody Map&lt;String, String&gt; map) { String loginAccount=map.get(&quot;username&quot;); String password = map.get(&quot;password&quot;); //String password = DigestUtils.md5Hex(); Map&lt;String, Object&gt; resultMap = userService.getUserByAccount(loginAccount, password); if (resultMap!=null) { Map&lt;String, Object&gt; userInfo=(Map&lt;String, Object&gt;)resultMap.get(&quot;userInfo&quot;); HttpServletRequest request = RequestUtil.getRequest(); request.getSession().setAttribute(&quot;userId&quot;, userInfo.get(&quot;id&quot;)); return ResultBuilder.success().build(resultMap); }else{ return ResultBuilder.fail().build(userService.getLoginFailReason(loginAccount, password)); } } /** * * &lt;p&gt;Title: getLoginUserInfo &lt;/p&gt; * &lt;p&gt;Description: TODO &lt;/p&gt; * @param userId * @return */ @ApiOperation(value=&quot;获取登录用户信息&quot;, httpMethod = &quot;GET&quot;,produces = MediaType.APPLICATION_JSON_VALUE) @RequestMapping(value = RestUrlConstants.LOGININFO, method = RequestMethod.GET) public ResultBuilder getLoginUserInfo(@RequestParam(value=&quot;loggedId&quot;,required=false)Integer userId,HttpServletRequest request){ if (userId==null) { HttpServletRequest request = RequestUtil.getRequest(); userId = Integer.valueOf(request.getSession().getAttribute(&quot;userId&quot;).toString()); } return ResultBuilder.success().build(userService.getUserById(userId)); } 3. 原理 //得到存储进去的request private static final ThreadLocal requestAttributesHolder = new NamedThreadLocal(“Request attributes”); //可被子线程继承的request private static final ThreadLocal inheritableRequestAttributesHolder = new NamedInheritableThreadLocal(“Request context”); 同时`getRequestAttributes()`方法,相当于直接获取ThreadLocal里面的值,这样就保证了每一次获取到的Request是该请求的request. public static RequestAttributes getRequestAttributes() { RequestAttributes attributes = requestAttributesHolder.get(); if (attributes == null) { attributes = inheritableRequestAttributesHolder.get(); } return attributes; }`","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"悦读","slug":"悦读","permalink":"/tags/悦读/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"spring 带cookie和不带cookie后端跨域解决","slug":"spring 带cookie和不带cookie后端跨域解决 - 副本","date":"2019-10-15T02:49:00.000Z","updated":"2020-01-10T08:36:02.570Z","comments":true,"path":"2019/10/15/spring 带cookie和不带cookie后端跨域解决 - 副本/","link":"","permalink":"/2019/10/15/spring 带cookie和不带cookie后端跨域解决 - 副本/","excerpt":"","text":"问题描述：前端访问后端获取数据需要进行跨域处理，在此过程中遇到请求返回403问题，原因是后端的Header与前端Header设置不统一，所以造成前后端不允许跨域访问，对错误代码如下: Request header field Content-Type is not allowed by Access-Control-Allow-Headers in preflight response. 问题解决：1.这里采用的是通过过滤器来对跨域进行设置，所以需要一个类来实现Filter（javax.servlet.Filter）接口，再从doFilter中设置Header信息使之运行前后端可以跨域访问具体代码如下 import java.io.IOException; import javax.servlet.Filter; import javax.servlet.FilterChain; import javax.servlet.FilterConfig; import javax.servlet.ServletException; import javax.servlet.ServletRequest; import javax.servlet.ServletResponse; import javax.servlet.http.HttpServletResponse; public class CorsFilter implements Filter{ @Override public void init(FilterConfig filterConfig) throws ServletException { } @Override public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException { HttpServletResponse resp =(HttpServletResponse) response; HttpServletRequest reqst = (HttpServletRequest)request; resp.setHeader(&quot;Access-Control-Allow-Origin&quot;, reqst.getHeader(&quot;Origin&quot;)); resp.setHeader(&quot;Access-Control-Allow-Credentials&quot;, &quot;true&quot;); resp.setHeader(&quot;Access-Control-Allow-Methods&quot;, &quot;*&quot;); resp.setHeader(&quot;Access-Control-Allow-Headers&quot;, &quot;Origin, x-requested-with, Content-Type, Accept,Access-Token,authorization&quot;); resp.setHeader(&quot;Access-Control-Expose-Headers&quot;, &quot;*&quot;); chain.doFilter(request, resp); } @Override public void destroy() { } } 编写完自己的Filter后需要在web.xml中声明起Filter存在和Filter过滤的范围，具体代码如下：&lt;filter&gt; &lt;filter-name&gt;corsFilter&lt;/filter-name&gt; &lt;filter-class&gt;com.cn.hy.project.filter.CorsFilter&lt;/filter-class&gt; &lt;async-supported&gt;true&lt;/async-supported&gt; &lt;/filter&gt; &lt;filter-mapping&gt; &lt;filter-name&gt;corsFilter&lt;/filter-name&gt; &lt;url-pattern&gt;/*&lt;/url-pattern&gt; &lt;/filter-mapping&gt; 关于在Filter中Header的信息设置详解：Access-Control-Allow-Origin：此标头指定资源可以访问的URI。如果未指定此标头，则默认情况下允许所有原点。如果指定了值（*），则允许所有原点的方式与默认值相同，但要注意当指定值为*时需要Access-Control-Allow-Headers的值中添加Origin或者也设置为*，否则还是不能跨域。 Access-Control-Allow-Methods：此标头用于指定访问资源时允许的方法。方法可以是GET，POST等。如果不使用此标头，则默认允许使用GET，POST和HEAD HTTP方法。如果已为此标头指定了HTTP方法，则仅允许指定的HTTP方法，而不是默认值。如果我们使用 （*）然后将允许所有HTTP方法。 Access-Control-Allow-Headers：用于 preflight request （预检请求）中，列出了将会在正式请求的 Access-Control-Expose-Headers 字段中出现的首部信息。 Access-Control-Expose-Headers：使用此标头，服务器告诉浏览器其白名单标头。跨机构服务器使用它来在飞行前请求的响应中发送标头。这些指定的标头是那些将在实际响应中通过交叉原点用于实际请求的标头。它不支持（*）。如果它是标题之一，即Cache-Control，Content-Language，Content-Type，Expires，Last-Modified或Pragma，则无需指定标题。我们可以在这里指定自定义标头。默认情况下，标题为空列表。 Access-Control-Allow-Credentials：此标头将输入作为布尔值，如果其值为true然后响应请求可以暴露给页面。凭据是cookie，授权标头或TLS客户端证书。如果值为false，则不会通过跨源发送凭据。 Access-Control-Max-Age：这个响应首部表示 preflight request （预检请求）的返回结果（即 Access-Control-Allow-Methods 和Access-Control-Allow-Headers 提供的信息） 可以被缓存多久。单位是秒。 注意：`在运行跨域访问时，针对是否允许传输cookie的设置 Access-Control-Allow-Credentials：此标头将输入作为布尔值，如果其值为true然后响应请求可以暴露给页面。凭据是cookie，授权标头或TLS客户端证书。如果值为false，则不会通过跨源发送凭据。`附：对于设置是否允许跨域处理，前端处理方法：","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"悦读","slug":"悦读","permalink":"/tags/悦读/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"Docker容器日志管理（清理）","slug":"docker容器日志管理(清理)","date":"2019-09-18T13:30:00.000Z","updated":"2019-09-26T01:45:36.397Z","comments":true,"path":"2019/09/18/docker容器日志管理(清理)/","link":"","permalink":"/2019/09/18/docker容器日志管理(清理)/","excerpt":"","text":"问题今天服务器磁盘空间满了,一排查发现是docker容器日志文件占满了整个硬盘docker容器日志 排查方法df -h 查看系统中文件的使用情况du -sh * 查看当前目录下各个文件及目录占用空间大小 解决方案 找出Docker容器日志，清理掉他。（不推荐，因为这样清理之后，随着时间的推移，容器日志会像杂草一样，卷土重来。）Docker容器日志位置：/var/lib/docker/containers/container_id/ 设置一个容器服务的日志大小上限，这样一来再也不用担心他会撑满硬盘了 具体解决步骤(1). 通过配置容器docker-compose的max-size选项来实现 nginx: image: nginx:1.12.1 restart: always logging: driver: “json-file” options: max-size: “5g” 重启nginx容器之后，其日志文件的大小就被限制在5GB (2). 全局设置。新建/etc/docker/daemon.json，若有就不用新建了。添加log-dirver和log-opts参数，样例如下： # vim /etc/docker/daemon.json { &quot;log-driver&quot;:&quot;json-file&quot;, &quot;log-opts&quot;: {&quot;max-size&quot;:&quot;500m&quot;, &quot;max-file&quot;:&quot;3&quot;} } max-size=500m，意味着一个容器日志大小上限是500M， max-file=3，意味着一个容器有三个日志，分别是id+.json、id+1.json、id+2.json。 // 重启docker守护进程 # systemctl daemon-reload # systemctl restart docker 注意： 设置的日志大小，只对新建的容器有效。这点很重要，如果要对已有容器设置，需要删除容器后重新创建。","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"悦读","slug":"悦读","permalink":"/tags/悦读/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"10分钟了解JWT","slug":"10分钟了解JWT","date":"2019-08-13T02:49:00.000Z","updated":"2019-08-13T03:08:29.170Z","comments":true,"path":"2019/08/13/10分钟了解JWT/","link":"","permalink":"/2019/08/13/10分钟了解JWT/","excerpt":"","text":"跨域身份验证Internet服务无法与用户身份验证分开。一般过程如下。 1.用户向服务器发送用户名和密码。 2.验证服务器后，相关数据（如用户角色，登录时间等）将保存在当前会话中。 3.服务器向用户返回session_id，session信息都会写入到用户的Cookie。 4.用户的每个后续请求都将通过在Cookie中取出session_id传给服务器。 5.服务器收到session_id并对比之前保存的数据，确认用户的身份。 这种模式最大的问题是，没有分布式架构，无法支持横向扩展。如果使用一个服务器，该模式完全没有问题。但是，如果它是服务器群集或面向服务的跨域体系结构的话，则需要一个统一的session数据库库来保存会话数据实现共享，这样负载均衡下的每个服务器才可以正确的验证用户身份。 例如：站点A和站点B提供同一公司的相关服务。现在要求用户只需要登录其中一个网站，然后它就会自动登录到另一个网站。怎么做？ 一种解决方案是听过持久化session数据，写入数据库或文件持久层等。收到请求后，验证服务从持久层请求数据。该解决方案的优点在于架构清晰，而缺点是架构修改比较费劲，整个服务的验证逻辑层都需要重写，工作量相对较大。而且由于依赖于持久层的数据库或者问题系统，会有单点风险，如果持久层失败，整个认证体系都会挂掉。本文给大家介绍另外一种灵活的解决方案，通过客户端保存数据，而服务器根本不保存会话数据，每个请求都被发送回服务器。 JWT是这种解决方案的代表。 JWT的原则JWT的原则是在服务器身份验证之后，将生成一个JSON对象并将其发送回用户，如下所示。 { &quot;UserName&quot;: &quot;Chongchong&quot;, &quot;Role&quot;: &quot;Admin&quot;, &quot;Expire&quot;: &quot;2018-08-08 20:15:56&quot; } 之后，当用户与服务器通信时，客户在请求中发回JSON对象。服务器仅依赖于这个JSON对象来标识用户。为了防止用户篡改数据，服务器将在生成对象时添加签名（有关详细信息，请参阅下文）。 服务器不保存任何会话数据，即服务器变为无状态，使其更容易扩展。 JWT的数据结构典型的，一个JWT看起来如下图。 改对象为一个很长的字符串，字符之间通过”.”分隔符分为三个子串。注意JWT对象为一个长字串，各字串之间也没有换行符，此处为了演示需要，我们特意分行并用不同颜色表示了。每一个子串表示了一个功能块，总共有以下三个部分： JWT的三个部分如下。JWT头、有效载荷和签名，将它们写成一行如下。我们将在下面介绍这三个部分。 JWT头部分是一个描述JWT元数据的JSON对象，通常如下所示。 { &quot;alg&quot;: &quot;HS256&quot;, &quot;typ&quot;: &quot;JWT&quot; } 在上面的代码中，alg属性表示签名使用的算法，默认为HMAC SHA256（写为HS256）；typ属性表示令牌的类型，JWT令牌统一写为JWT。 最后，使用Base64 URL算法将上述JSON对象转换为字符串保存。 有效载荷有效载荷部分，是JWT的主体内容部分，也是一个JSON对象，包含需要传递的数据。 JWT指定七个默认字段供选择。 iss：发行人 exp：到期时间 sub：主题 aud：用户 nbf：在此之前不可用 iat：发布时间 jti：JWT ID用于标识该JWT 除以上默认字段外，我们还可以自定义私有字段，如下例： { &quot;sub&quot;: &quot;1234567890&quot;, &quot;name&quot;: &quot;chongchong&quot;, &quot;admin&quot;: true } 请注意，默认情况下JWT是未加密的，任何人都可以解读其内容，因此不要构建隐私信息字段，存放保密信息，以防止信息泄露。 JSON对象也使用Base64 URL算法转换为字符串保存。 签名哈希 签名哈希部分是对上面两部分数据签名，通过指定的算法生成哈希，以确保数据不会被篡改。 首先，需要指定一个密码（secret）。该密码仅仅为保存在服务器中，并且不能向用户公开。然后，使用标头中指定的签名算法（默认情况下为HMAC SHA256）根据以下公式生成签名。 HMACSHA256(base64UrlEncode(header) + &quot;.&quot; +base64UrlEncode(payload),secret) 在计算出签名哈希后，JWT头，有效载荷和签名哈希的三个部分组合成一个字符串，每个部分用”.”分隔，就构成整个JWT对象。 Base64URL算法 如前所述，JWT头和有效载荷序列化的算法都用到了Base64URL。该算法和常见Base64算法类似，稍有差别。 作为令牌的JWT可以放在URL中（例如api.example/?token=xxx）。 Base64中用的三个字符是”+”，”/“和”=”，由于在URL中有特殊含义，因此Base64URL中对他们做了替换：”=”去掉，”+”用”-“替换，”/“用”_”替换，这就是Base64URL算法，很简单把。 JWT的用法客户端接收服务器返回的JWT，将其存储在Cookie或localStorage中。 此后，客户端将在与服务器交互中都会带JWT。如果将它存储在Cookie中，就可以自动发送，但是不会跨域，因此一般是将它放入HTTP请求的Header Authorization字段中。 Authorization: Bearer 当跨域时，也可以将JWT被放置于POST请求的数据主体中。 JWT问题和趋势1、JWT默认不加密，但可以加密。生成原始令牌后，可以使用改令牌再次对其进行加密。 2、当JWT未加密方法是，一些私密数据无法通过JWT传输。 3、JWT不仅可用于认证，还可用于信息交换。善用JWT有助于减少服务器请求数据库的次数。 4、JWT的最大缺点是服务器不保存会话状态，所以在使用期间不可能取消令牌或更改令牌的权限。也就是说，一旦JWT签发，在有效期内将会一直有效。 5、JWT本身包含认证信息，因此一旦信息泄露，任何人都可以获得令牌的所有权限。为了减少盗用，JWT的有效期不宜设置太长。对于某些重要操作，用户在使用时应该每次都进行进行身份验证。 6、为了减少盗用和窃取，JWT不建议使用HTTP协议来传输代码，而是使用加密的HTTPS协议进行传输。 参考链接Introduction to JSON Web Tokens， by Auth0Sessionless Authentication using JWTs (with Node + Express + Passport JS), by Bryan ManueleLearn how to use JSON Web Tokens, by dwylJSON Web Token 入门教程,by 阮一峰 原文链接：https://baijiahao.baidu.com/s?id=1608021814182894637&amp;wfr=spider&amp;for=pc","categories":[{"name":"转载","slug":"转载","permalink":"/categories/转载/"}],"tags":[{"name":"悦读","slug":"悦读","permalink":"/tags/悦读/"}],"keywords":[{"name":"转载","slug":"转载","permalink":"/categories/转载/"}]},{"title":"Lambda表达式","slug":"Lambda表达式","date":"2019-07-07T12:25:00.000Z","updated":"2019-08-13T03:08:38.909Z","comments":true,"path":"2019/07/07/Lambda表达式/","link":"","permalink":"/2019/07/07/Lambda表达式/","excerpt":"","text":"JAVA中重要的函数接口 接口 抽象方法 功能 参数 返回类型 示例 Predicate test(T t) 判断真假 T boolean 任天堂是世界的主宰吗？ Consumer accept(T t) 消费消息 T void 输出一个值 Function&lt;T,R&gt; R apply(T t) 将T映射为R（转换功能） T R 获得saber对象的名字 Supplier T get() 生产消息 None T 工厂方法 UnaryOperator T apply(T t) 一元操作 T T 逻辑非（！） BinaryOperator apply(T t, U u) 二元操作 （T，T） T 求两个数的乘积（*） 常用的流操作惰性求值：只描述Stream，操作的结果也是Stream，这样的操作称为惰性求值。惰性求值可以像建造者模式一样链式使用，最后再使用及早求值得到最终结果。及早求值：得到最终的结果而不是Stream，这样的操作称为及早求值。总结：返回值是Stream就是惰性求值，反之是及早求值 collect(Collectors.toList()) 由Stream里的值生成一个List，是一个及早求值得操作，还有toSet()，toMap()等 List&lt;String&gt; collect = Stream.of(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;) .collect(Collectors.toList()); map 可以将一个流中的值转换成一个新的流T -&gt; Function -&gt; R转换功能，内部就是Function接口。惰性求值 List&lt;String&gt; collect = Stream.of(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;) .map(s -&gt; s.toUpperCase()) .collect(Collectors.toList()); filter 便利数据并检查其中的元素T -&gt; Predicate -&gt;boolean顾名思义，起过滤筛选的作用。内部就是Predicate接口。惰性求值。 List&lt;String&gt; collect = Stream.of(&quot;ac&quot;, &quot;bd&quot;, &quot;cn&quot;) .filter(s -&gt; s.contains(&quot;b&quot;)) .collect(Collectors.toList()); count 统计功能，一般都是结合filter使用，因为先筛选出我们需要的再统计即可。及早求值 List&lt;Track&gt; tracks = asList(new Track(&quot;Bakai&quot;, 524), new Track(&quot;Viltel&quot;, 378), new Track(&quot;Timewas&quot;, 451)); long count = tracks.stream().filter(t -&gt; t.getLength() &lt; 400).count(); System.out.println(count); 输出结果1 flatMap 和map类似，可以将多个Stream合并连接成一个Stream。惰性求值 List&lt;Integer&gt; together = Stream.of(asList(1, 2), asList(3, 4)) .flatMap(num -&gt; num.stream()) .collect(Collectors.toList()); max和min 取最大值最小值。及早求值。 List&lt;Track&gt; tracks = asList(new Track(&quot;Bakai&quot;, 524), new Track(&quot;Viltel&quot;, 378), new Track(&quot;Timewas&quot;, 451)); Optional&lt;Track&gt; t = tracks.stream() .min(Comparator.comparing(track -&gt;track.getLength())); Track track = t.get(); reduce 可以实现从一组值中生成一个新的值。及早求值。 Integer reduce = Stream.of(1, 2, 3) .reduce(0, (acc, element) -&gt; acc + element); System.out.println(reduce); 输出结果6 高级收集器转换成块partitioningBy常用的流操作是将其分解成两个集合，Collectors.partitioningBy帮我们实现了，接收一个Predicate函数式接口。将示例学生分为会唱歌与不会唱歌的两个集合。类似数据库partition By。 //省略List&lt;student&gt; students的初始化 Map&lt;Boolean, List&lt;Student&gt;&gt; listMap = students.stream().collect( Collectors.partitioningBy(student -&gt; student.getSpecialities(). contains(SpecialityEnum.SING))); 数据分组groupingBy数据分组是一种更自然的分割数据操作，与将数据分成 ture 和 false 两部分不同，可以使用任意值对数据分组。Collectors.groupingBy接收一个Function做转换。类似数据库的group by。 //省略List&lt;student&gt; students的初始化 Map&lt;SpecialityEnum, List&lt;Student&gt;&gt; listMap = students.stream().collect( Collectors.groupingBy(student -&gt; student.getSpecialities().get(0))); 方法引用old: artist -&gt; artist.getName()new: Artist::getName方法引用是一种引用方法的轻量级语法，如:ClassName:methodName","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"悦读","slug":"悦读","permalink":"/tags/悦读/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"Docker入门","slug":"Docker入门","date":"2019-06-21T05:52:00.000Z","updated":"2019-08-13T03:08:41.485Z","comments":true,"path":"2019/06/21/Docker入门/","link":"","permalink":"/2019/06/21/Docker入门/","excerpt":"","text":"CentOS7安装Docker前提条件Docker 运行在 CentOS 7 上，要求系统为64位、系统内核版本为 3.10 以上。 使用 yum 安装（CentOS 7下）Docker 要求 CentOS 系统的内核版本高于 3.10 ，查看本页面的前提条件来验证你的CentOS 版本是否支持 Docker 。通过 uname -r 命令查看你当前的内核版本 安装 Docker从 2017 年 3 月开始 docker 在原来的基础上分为两个分支版本: Docker CE 和 Docker EEDocker CE 即社区免费版，Docker EE 即企业版，强调安全，但需付费使用。 移除旧的版本： sudo yum remove docker \\ docker-client \\ docker-client-latest \\ docker-common \\ docker-latest \\ docker-latest-logrotate \\ docker-logrotate \\ docker-engine 安装必须的软件包: 安装yum-utils，它提供一个yum-config-manager单元，同时安装的device-mapper-persistent-data和lvm2用于储存设备映射（devicemapper）必须的两个软件包。sudo yum install -y yum-utils device-mapper-persistent-data lvm2 紧接着配置一个稳定（stable）的仓库: 仓库配置会保存到/etc/yum.repos.d/docker-ce.repo文件中。sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo 更新Yum安装的相关Docke软件包: sudo yum makecache fast 安装Docker CE: sudo yum install docker-ce 设置随系统启动 systemctl enable docker.service 启动Docker sudo systemctl start docker 镜像加速鉴于国内网络问题，后续拉取 Docker 镜像十分缓慢，我们可以需要配置加速器来解决vi /etc/docker/daemon.json { &quot;registry-mirrors&quot;:[&quot;XXX&quot;], //镜像加速地址 &quot;insecure-registries&quot;: [&quot;10.0.91.129:8888&quot;] //Docker如果需要从非SSL源管理镜像，这里加上 } 国内较快的镜像(registry-mirrors)原地址：网易：http://hub-mirror.c.163.comdocker官方中国区：https://registry.docker-cn.com 使用阿里云加速器加快获取docker官方镜像： 注册阿里云 进入阿里云容器镜像服务 改完记得重新启动下docker服务systemctl restart docker 卸载Docker CE: 查询安装过的包yum list installed | grep docker 删除安装的软件包yum -y remove XXXXXX 删除镜像/容器等rm -rf /var/lib/docker","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"悦读","slug":"悦读","permalink":"/tags/悦读/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"Hello World","slug":"HelloWorld","date":"2019-05-19T14:16:00.000Z","updated":"2020-01-10T08:45:38.156Z","comments":false,"path":"2019/05/19/HelloWorld/","link":"","permalink":"/2019/05/19/HelloWorld/","excerpt":"","text":"一个java后端的blog之路正式开启","categories":[{"name":"生活","slug":"生活","permalink":"/categories/生活/"}],"tags":[],"keywords":[{"name":"生活","slug":"生活","permalink":"/categories/生活/"}]}]}